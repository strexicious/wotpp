let nl "\n"
let quoted(x) "\"" .. x .. "\""
let const(x, val) eval("let " .. x .. " " .. quoted(val))

#[ numbers ]
let zero "z"
let succ(x) "s(" .. x .. ")"
let add(x,z) {
  let s(x) succ(x)
  eval(x)
}

let mult(x,y) {
  let s(x) add(y, x)
  let z zero
  eval(x)
}

let one succ(zero)
let two succ(one)
#[ let three add(one, two) ]
const("three", add(one, two))
#[ let six mult(two, three) ]
const("six", mult(two, three))

zero nl
one nl
two nl
three nl
six nl

let ifz(x, then, else) {
  let s(x) else
  let z then
  eval(x)
}

ifz(zero, "it is!", "not?!") nl
ifz(one, "it is!", "not?!") nl

let repeat(str, x) {
  let s(x) str .. x
  let z ""
  eval(x)
}
repeat("Let's go!" .. nl, add(one, add(three, six)))

let pred(x) {
  let s(x) "ns(" .. x .. ")"
  let z zero
  const("_x", eval(x))
  let s(x) {
    let s(x) succ(x)
    x
  }
  let ns(x) s(x)
  eval(_x)
}

pred(six) nl
pred(three) nl
pred(two) nl
pred(one) nl

let subt(x,y) {
  let s(x) pred(x)
  let z x
  eval(y)
}

subt(six, two)
